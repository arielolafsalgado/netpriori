nullspace(A)
# Consideremos un conjunto de dos links.
## Eso nos da las ecuaciones
require(MASS)
Null(A)
A
Null(t(A))
rowSums(A)
colSums(A)
K = Null(t(A))
colSums(K)
rowSums(K)
colSums(K**2)
K[,1]%*%K[,2]
K[,1]%*%K[,3]
K[,1]%*%K[,4]
K[,1]%*%K[,5]
K[,1]%*%K[,6]
K[,2]%*%K[,5]
K[,3]%*%K[,5]
K[,4]%*%K[,5]
K[,4]%*%K[,3]
K[,4]%*%K[,2]
K[,3]%*%K[,2]
z = c(0.5,0.5,0,0.5,0.5,0)
K[,1]%*%z
K%*%z
t(K)%*%z
sum(t(K)%*%z)
K[,1]*1/3 + K[,3]*2/3 + K[,4]*2/3
coef = t(K)%*%z
coef
K%*%coef
z = c(0.5,0.6,0,0.5,0.5,0)
coef = t(K)%*%z
z_ = K%*%coef
z_
## x12 + x1n2 = x13 + x1n3
## Esto corresponde a la matriz
A = matrix(c(1,1,0,-1,-1,0,0,0,0,
1,1,0,0,0,0,-1,-1,0,
0,0,0,1,1,0,-1,-1,0),nrow=3,byrow = TRUE)
A
K = Null(t(A))
z = c(0.5,0.5,0,
0.5,0.5,0,
0.5,0.5,0)
coef = t(K)%*%z
coef
z_ = K%*%coef
z_
z = c(0.5,0.7,0,
0.5,0.5,0,
0.5,0.5,0)
coef = t(K)%*%z
z_ = K%*%coef
z_
z = c(0.5,1,0,
0.5,0.5,0,
0.5,0.5,0)
coef = t(K)%*%z
z_ = K%*%coef
z_
z = c(0.5,1,0,
0.5,0.5,0,
0.5,0.1,0)
coef = t(K)%*%z
z_ = K%*%coef
z_
sum(z_[1:3,])
z = c(0.5,.25,0,
0.5,0.5,0,
0.5,0.1,0)
coef = t(K)%*%z
z_ = K%*%coef
sum(z_[1:3,])
sum(z_[4:6,])
sum(z_[7:9,])
## x12 + x1n2 = x13 + x1n3
## Esto corresponde a la matriz
A = matrix(c(1,1,0,-1,-1,0,0,0,0,
1,0,1,0,0,0,-1,-1,0,
0,0,0,1,0,1,-1,0,1),nrow=3,byrow = TRUE)
K = Null(t(A))
K
z = c(0.25,0.25,0.25,
0.25,0.25,0.25,
0.25,0.25,0.25)
coef = t(K)%*%z
z_ = K%*%coef
z_
## x12 + x1n2 = x13 + x1n3
## Esto corresponde a la matriz
A = matrix(c(1,1,0,-1,-1,0,0,0,0,
1,0,1,0,0,0,-1,-1,0,
0,0,0,1,0,1,-1,0,1),nrow=3,byrow = TRUE)
K = Null(t(A))
z = c(0.25,0.25,0.25,
0.25,0.25,0.25,
0.25,0.25,0.25)
coef = t(K)%*%z
z_ = K%*%coef
z_
## x12 + x1n2 = x13 + x1n3
## Esto corresponde a la matriz
A = matrix(c(1,1,0,-1,-1,0,0,0,0,
1,0,1,0,0,0,-1,-1,0,
0,0,0,1,0,1,-1,0,-1),nrow=3,byrow = TRUE)
K = Null(t(A))
z = c(0.25,0.25,0.25,
0.25,0.25,0.25,
0.25,0.25,0.25)
coef = t(K)%*%z
z_ = K%*%coef
z_
z = c(0.5,0.25,0.25,
0.25,0.25,0.25,
0.25,0.25,0.25)
coef = t(K)%*%z
z_ = K%*%coef
z_
z = c(0.5,0.25,0.25,
0.25,0.25,0.25,
0.1,0.25,0.25)
coef = t(K)%*%z
z_ = K%*%coef
z_
rm(list=ls())
gc()
###########################################
# Densities
###########################################
check_z = function(zs,params){
n = length(zs)/3
flag=TRUE
for(i in 1:n){
z0 = zs[1:3 + (i-1)*3]
flag = flag & (sum(z0)<=1 & all(z0>=0))
}
return(flag)
}
###########################################
# Densities
###########################################
check_z = function(zs){
n = length(zs)/3
flag=TRUE
for(i in 1:n){
z0 = zs[1:3 + (i-1)*3]
flag = flag & (sum(z0)<=1 & all(z0>=0))
}
return(flag)
}
density_measure = function(z,params){
#'@param z The value of z at which the measure density is evaluated
#'@param params A list containing a vector of alfas and a matrix of measure H
H = params$H
alfas = params$alfas
flag = check_z(z)
if(flag){
m = H%*%z
r = dbeta(m,alfas[1],alfas[2],log = TRUE)
}else{
r= -Inf
}
return(r)
}
density_measure = function(z,params){
#'@param z The value of z at which the measure density is evaluated
#'@param params A list containing a vector of alfas and a matrix of measure H
H = params$H
alfas = params$alfas
flag = check_z(z)
if(flag){
m = H%*%z
r = dbeta(m,alfas[1],alfas[2],log = TRUE)
}else{
r= -Inf
}
return(r)
}
source('repo.R')
setwd("~/LABURO/netPriori")
source('repo.R')
require(ggplot2)
require(patchwork)
require(igraph)
g = make_empty_graph(n=3,directed=FALSE)
g = add_edges(g,c(1,2,1,3))
plot(g)
X = as_adjacency_matrix(g,sparse = FALSE)
## Armamos la matriz de constraints, y el proyector.
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
kappas = generate_kappas(Z,K=22)
### Dos links que se tocan
g = make_empty_graph(n=3,directed=FALSE)
g = add_edges(g,c(1,2,1,3))
plot(g)
X = as_adjacency_matrix(g,sparse = FALSE)
## Armamos la matriz de constraints, y el proyector.
## Probamos un H
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
gamma = 2
K = 4
kappas = generate_kappas(Z,gamma = gamma,K=K)
H = c(0,0,0,0,1,1)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
z0 = kappas[c(1:3,5:7)]/K
initial = t(P)%*%z0
density = density_eta
samples0 = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_posteriori_eta
samplesM = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial
params$K
#'@param z The value of z at which the measure density is evaluated
#'@param params A list containing a vector of alfas and a matrix of measure H, and a matrix of proyections K
K = params$K
z = as.numeric(K%*%eta)
eta = initial
#'@param z The value of z at which the measure density is evaluated
#'@param params A list containing a vector of alfas and a matrix of measure H, and a matrix of proyections K
K = params$K
z = as.numeric(K%*%eta)
z
any(z>=0) | any(z>=1)
any(z<=0) | any(z>=1)
#'@param z The value of z at which the measure density is evaluated
#'@param params A list containing a vector of alfas and a matrix of measure H, and a matrix of proyections K
K = params$K
z = as.numeric(K%*%eta)
any(z<=0) | any(z>=1)
density_measure(z,params)
source('~/LABURO/netPriori/repo.R', echo=TRUE)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
df0 = as.data.frame(t(P%*%t(samples0)))
dfM = as.data.frame(t(P%*%t(samplesM)))
dfL = as.data.frame(t(P%*%t(samplesL)))
colnames(df0) = paste('t',Z,sep='')
colnames(dfL) = paste('t',Z,sep='')
colnames(dfM) = paste('t',Z,sep='')
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggLL$gL1
ggLL$gL2
hist(dfL$t13)
hist(dfL$tn13)
hist(dfL$tn13+dfL$t13)
hist(dfL$tn13,dfL$t13)
plot(dfL$tn13,dfL$t13)
H = c(0,0,0,1,0,1)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
## Armamos la matriz de constraints, y el proyector.
## Probamos un H
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
gamma = 2
K = 4
kappas = generate_kappas(Z,gamma = gamma,K=K)
H = c(0,0,0,1,0,1)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
z0 = kappas[c(1:3,5:7)]/K
initial = t(P)%*%z0
density = density_eta
samples0 = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_posteriori_eta
samplesM = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
df0 = as.data.frame(t(P%*%t(samples0)))
dfM = as.data.frame(t(P%*%t(samplesM)))
dfL = as.data.frame(t(P%*%t(samplesL)))
colnames(df0) = paste('t',Z,sep='')
colnames(dfL) = paste('t',Z,sep='')
colnames(dfM) = paste('t',Z,sep='')
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggL0$gL1
ggLM$gL1
ggLL$gL1
ggLL$gL2
ggL0L$A
ggL0L$B
ggL0L$C
ggL0L$D
ggL0L$E
ggL0L$F
ggL0L$E
ggL0L$G
ggL0L$H
ggL0M$A
ggL0M$B
ggL0M$C
ggL0M$F
ggL0M$G
ggL0M$H
ggL0M$F
ggL0M$G
ggL0M$H
mean(df0$t12+df0$t1n2)
mean(df0$t12+df0$t1n2)
mean(dfM$t12+dfM$t1n2)
mean(df0$t13+df0$t1n3)
mean(dfM$t13+dfM$t1n3)
mean(df0$t12+df0$tn12)
mean(dfM$t12+dfM$tn12)
mean(df0$t13+df0$tn13)
mean(dfM$t13+dfM$tn13)
## Armamos la matriz de constraints, y el proyector.
## Probamos un H
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
gamma = 2
K = 4
kappas = generate_kappas(Z,gamma = gamma,K=K)
H = c(1,0,1,0,0,0)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
z0 = kappas[c(1:3,5:7)]/K
initial = t(P)%*%z0
density = density_eta
samples0 = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_posteriori_eta
samplesM = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
df0 = as.data.frame(t(P%*%t(samples0)))
dfM = as.data.frame(t(P%*%t(samplesM)))
dfL = as.data.frame(t(P%*%t(samplesL)))
colnames(df0) = paste('t',Z,sep='')
colnames(dfL) = paste('t',Z,sep='')
colnames(dfM) = paste('t',Z,sep='')
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggL0$gL1
ggLM$gL1
ggLL$gL1
ggL0M$A
ggL0M$B
ggL0M$C
ggL0M$D
ggL0M$C
ggL0M$D
ggL0M$E
ggL0M$F
ggL0M$G
ggL0M$H
mean(df0$t12+df0$t1n2)
mean(dfM$t12+dfM$t1n2)
mean(df0$t13+df0$t1n3)
mean(dfM$t13+dfM$t1n3)
mean(df0$t12+df0$tn12)
mean(dfM$t12+dfM$tn12)
mean(df0$t13+df0$tn13)
mean(dfM$t13+dfM$tn13)
## Armamos la matriz de constraints, y el proyector.
## Probamos un H
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
gamma = 2
K = 4
kappas = generate_kappas(Z,gamma = gamma,K=K)
H = c(0,0,0,1,0,1)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
z0 = kappas[c(1:3,5:7)]/K
initial = t(P)%*%z0
density = density_eta
samples0 = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_posteriori_eta
samplesM = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
df0 = as.data.frame(t(P%*%t(samples0)))
dfM = as.data.frame(t(P%*%t(samplesM)))
dfL = as.data.frame(t(P%*%t(samplesL)))
colnames(df0) = paste('t',Z,sep='')
colnames(dfL) = paste('t',Z,sep='')
colnames(dfM) = paste('t',Z,sep='')
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggLM$gL1
ggLM$gL2
ggL0M$A
ggL0M$B
ggL0M$C
ggL0M$F
mean(df0$t12+df0$t1n2)
mean(dfM$t12+dfM$t1n2)
mean(df0$t13+df0$t1n3)
mean(dfM$t13+dfM$t1n3)
mean(df0$t12+df0$tn12)
mean(dfM$t12+dfM$tn12)
mean(df0$t13+df0$tn13)
mean(dfM$t13+dfM$tn13)
####################################################
###### OTHER
####################################################
make_ggmagic = function(df,gtitle='Priori'){
gg12 = ggplot(data=df,aes(x=t12,y=t1n2))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
gg13 = ggplot(data=df,aes(x=t12,y=tn12))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
gg23 = ggplot(data=df,aes(x=t1n2,y=tn12))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
gg1 = ggplot(data=df,aes(x=t12,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gg2 = ggplot(data=df,aes(x=t1n2,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gg3 = ggplot(data=df,aes(x=tn12,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gL1 = (gg1+gg2+gg3)/(gg12+gg23+gg13)
gg45 = ggplot(data=df,aes(x=t13,y=t1n3))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
gg56 = ggplot(data=df,aes(x=t13,y=tn13))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
gg46 = ggplot(data=df,aes(x=t1n3,y=tn13))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
gg4 = ggplot(data=df,aes(x=t13,y=..density..))+ ggtitle(label=ggtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gg5 = ggplot(data=df,aes(x=t1n3,y=..density..))+ ggtitle(label=ggtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gg6 = ggplot(data=df,aes(x=tn13,y=..density..))+ ggtitle(label=ggtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gL2 = (gg4+gg5+gg6)/(gg45+gg56+gg46)
gg14 = ggplot(data=df,aes(x=t12,y=t13))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
gg25 = ggplot(data=df,aes(x=t1n2,y=t1n3))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
gg36 = ggplot(data=df,aes(x=tn12,y=tn13))+ ggtitle(label=ggtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
gL3 = gg14+gg25+gg36
ggA = ggplot(data=df,aes(x=t12+t1n2,y=t12+tn12))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1))
ggB = ggplot(data=df,aes(x=t12+t1n2,y=t13+tn13))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
ggC = ggplot(data=df,aes(x=t12+tn12,y=t13+tn13))+ ggtitle(label=gtitle) + geom_bin2d(show.legend=FALSE) + xlim(c(0,1)) + ylim(c(0,1)) + theme(legend.position = c(0.1,.7))
ggD = ggplot(data=df,aes(x=t12+t1n2,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
ggE = ggplot(data=df,aes(x=t12+tn12,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
ggF = ggplot(data=df,aes(x=t13+tn13,y=..density..))+ ggtitle(label=gtitle) + geom_histogram() + xlim(c(0,1))  #+ ylim(c(0,1))
gL4 = (ggD+ggE+ggF)/(ggA+ggB+ggC)
return(list('gL1'=gL1,'gL2'=gL2,'gL3'=gL3,'gL4'=gL4))
}
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggL0$gL4
cor(df0$t12+df0$t1n2,df0$t13+df0$tn13)
cor(df0$t12+df0$t1n2,df0$t12+df0$tn12)
cor(df0$t12+df0$tn12,df0$t13+df0$tn13)
ggL0$gL4
ggLM$gL4
## Armamos la matriz de constraints, y el proyector.
## Probamos un H
Z = generate_state_vector(X)
A = generate_constraint_matrix(X)
P = generate_proyector(A)
gamma = 2
K = 4
kappas = generate_kappas(Z,gamma = gamma,K=K)
H = c(1,1,0,0,0,0)
alfas = c(99,1)
params = list('H'=H,'alfas'=alfas,'kappas'=kappas,'K'=P)
z0 = kappas[c(1:3,5:7)]/K
initial = t(P)%*%z0
density = density_eta
samples0 = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_posteriori_eta
samplesM = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
initial = colMeans(samples0)
density = density_measure_eta
samplesL = sampling(density = density,initial=initial,params=params,full.result = FALSE,scale=6e-2)
df0 = as.data.frame(t(P%*%t(samples0)))
dfM = as.data.frame(t(P%*%t(samplesM)))
dfL = as.data.frame(t(P%*%t(samplesL)))
colnames(df0) = paste('t',Z,sep='')
colnames(dfL) = paste('t',Z,sep='')
colnames(dfM) = paste('t',Z,sep='')
# Plot df0
ggL0 = make_ggmagic(df0)
ggLM = make_ggmagic(dfM,gtitle = 'Post')
ggLL = make_ggmagic(dfL,gtitle = 'Measure')
ggL0M = make_ggmagic2(df0, dfM)
ggL0L = make_ggmagic2(df0, dfL)
ggL0$gL1
ggL0$gL4
ggLM$gL4
